{% extends layout %}

{% trans_default_domain 'LexikTranslationBundle' %}

{% block lexik_stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('bundles/lexiktranslation/css/translation.css') }}">
{% endblock %}

{% block lexik_title %}{{ 'translations.page_title'|trans({}, 'LexikTranslationBundle') }}{% endblock %}

{% block lexik_content %}
    <div class="container">
        {% block lexik_toolbar %}
            {% include '@LexikTranslationBundle/Translation/_gridToolbar.html.twig' %}
        {% endblock lexik_toolbar %}

        {% block lexik_data_grid %}
            {% if translations is empty %}
                <div class="alert alert-info" role="alert">
                    No Translations
                </div>
            {% endif %}
            <div id="translation-grid">
                {% set totalPages = translationsCount / 20 %}
                {% set totalPagesRounded = totalPages|round(0, 'ceil') %}
                <table class="table table-bordered table-striped">
                    <tr>
                        <th id='id-header' class="text-center sortable col-_id" onclick="sortColumn('id', 'asc', {{ totalPagesRounded }})" style="cursor: pointer;" data-totalPages = {{ totalPagesRounded }}>
                            Id
                            <span class="glyphicon glyphicon-chevron-down"></span>
                        </th>

                        <th id='domain-header' class="text-center sortable col-_domain" onclick="sortColumn('domain', 'asc', {{ totalPagesRounded }})" style="cursor: pointer;">
                            {% trans %} translations.domain {% endtrans %}
                            <span class="glyphicon glyphicon-chevron-down"></span>
                        </th>

                        <th id='key-header' class="text-center sortable col-_key" onclick="sortColumn('key', 'asc', {{ totalPagesRounded }})" style="cursor: pointer;">
                            {% trans %} translations.key {% endtrans %}
                            <span class="glyphicon glyphicon-chevron-down"></span>
                        </th>

                        {% for locale in locales %}
                            <th class="text-center sortable col-de">
                                {{ locale }}
                            </th>
                        {% endfor %}
                        <th class="col-save"></th>
                    </tr>
                    <tr>
                        <th></th>
                        <th>
                            <input type="text" id="domain" onkeyup="filterColumn('domain')" class="form-control input-sm">
                        </th>
                        <th>
                            <input type="text" id="key" onkeyup="filterColumn('key')" class="form-control input-sm">
                        </th>
                        {% for locale in locales %}
                            <th>
                                <input type="text" id="{{ locale }}" onkeyup="filterColumn('{{ locale }}')" class="form-control input-sm">
                            </th>
                        {% endfor %}
                        <th></th>
                    </tr>
                </table>
                {% if translations is not empty %}
                    <ul class="pagination ng-table-pagination pull-right">
                        <li>
                            <a class="prev disabled" onclick="changePage(({{ page }} - 1), {{ totalPagesRounded }})">&laquo;</a>
                        </li>
                        <li class="dynamicPages">
                            {% for page in 1..6 %}
                                <a class="page-{{ page }}" onclick="changePage({{ page }}, {{ totalPagesRounded }})">{{ page }}</a>
                            {% endfor %}
                        </li>
                        <li>
                            <a class="next" onclick="changePage(({{ page }} + 1), {{ totalPagesRounded }})">&raquo;</a>
                        </li>
                    </ul>
                {% endif %}
            </div>
        {% endblock lexik_data_grid %}
    </div>
{% endblock %}

{% block lexik_javascript_footer %}
    {{ parent() }}
    <script>
        var translationCfg = {
            locales: {{ locales | json_encode | raw }},
            inputType: '{{ inputType }}',
            autoCacheClean: {{ autoCacheClean ? 'true' : 'false' }},
            profilerTokens: {{ tokens is not null ? (tokens | json_encode | raw) : 'null' }},
            toggleSimilar: '{{ toggleSimilar }}',
            csrfToken: '{{ csrf_token('lexik-translation') }}',
            url: {
                list: '{{ path('lexik_translation_list') }}',
                listByToken: '{{ path('lexik_translation_profiler', {'token': '-token-'}) }}',
                update: '{{ path('lexik_translation_update', {'id': '-id-'}) }}',
                delete: '{{ path('lexik_translation_delete', {'id': '-id-'}) }}',
                deleteLocale: '{{ path('lexik_translation_delete_locale', {'id': '-id-', 'locale': '-locale-'}) }}',
                invalidateCache: '{{ path('lexik_translation_invalidate_cache') }}'
            },
            label: {
                hideCol: '{{ 'translations.show_hide_columns'|trans }}',
                toggleAllCol: '{{ 'translations.toggle_all_columns'|trans }}',
                invalidateCache: '{{ 'translations.invalidate_cache'|trans }}',
                allTranslations: '{{ 'translations.all_translations'|trans }}',
                profiler: '{{ 'translations.profiler'|trans }}',
                dataSource: '{{ 'translations.data_source'|trans }}',
                latestProfiles: '{{ 'translations.latest_profiles'|trans }}',
                profile: '{{ 'translations.profile'|trans }}',
                saveRow: '{{ 'translations.save_row'|trans }}',
                domain: '{{ 'translations.domain'|trans }}',
                key: '{{ 'translations.key'|trans }}',
                save: '{{ 'translations.save'|trans }}',
                updateSuccess: '{{ 'translations.successfully_updated'|trans }}',
                updateFail: '{{ 'translations.update_failed'|trans }}',
                deleteSuccess: '{{ 'translations.successfully_deleted'|trans }}',
                deleteFail: '{{ 'translations.delete_failed'|trans }}',
                noTranslations: '{{ 'translations.no_translations'|trans }}'
            }
        };

        function enableMode(mode, lexikTranslationId) {
            if (mode == 'edit') {
                $('#editButton-' + lexikTranslationId).hide();
                $('#deleteButton-' + lexikTranslationId).hide();
                $('#saveButton-' + lexikTranslationId).show();
                $('#cancelButton-' + lexikTranslationId).show();
                {% for locale in locales %}
                    $('#content-' + lexikTranslationId + '-' + '{{ locale }}').hide();
                    $('#inputContent-' + lexikTranslationId + '-' + '{{ locale }}').show();
                {% endfor %}
            } else if (mode == 'view') {
                $('#editButton-' + lexikTranslationId).show();
                $('#deleteButton-' + lexikTranslationId).show();
                $('#saveButton-' + lexikTranslationId).hide();
                $('#cancelButton-' + lexikTranslationId).hide();
                {% for locale in locales %}
                    oldValue = $('#content-' + lexikTranslationId + '-' + '{{ locale }}').text();
                    newValue = $('#inputContent-' + lexikTranslationId + '-' + '{{ locale }}').val();

                    if (oldValue !== newValue) {
                        saveUpdatedLexikTranslations(lexikTranslationId, '{{ locale }}', newValue, 'translation', true)
                    }

                    $('#content-' + lexikTranslationId + '-' + '{{ locale }}').show();
                    $('#inputContent-' + lexikTranslationId + '-' + '{{ locale }}').hide();
                    $('#btnDelete-' + lexikTranslationId + '-' + '{{ locale }}').hide();
                    $('#btnKeyDelete-' + lexikTranslationId).hide();
                {% endfor %}
            } else if (mode == 'delete') {
                $('#editButton-' + lexikTranslationId).hide();
                $('#deleteButton-' + lexikTranslationId).hide();
                $('#cancelButton-' + lexikTranslationId).show();
                {% for locale in locales %}
                    $('#btnDelete-' + lexikTranslationId + '-' + '{{ locale }}').show();
                    $('#btnKeyDelete-' + lexikTranslationId).show();
                {% endfor %}
            }
        }

        function saveUpdatedLexikTranslations(lexikTranslationId, locale, newValue) {
            let url = '';
            let params = [];

            $('#inputContent-' + lexikTranslationId + '-' + locale).val(newValue);
            $('#content-' + lexikTranslationId + '-' + locale).text(newValue);


            let saveButton = $('#saveButton-' + lexikTranslationId);
            let trElement = saveButton.closest('tr.content');
            let tdElements = trElement.find('td');
            let translationsElements = trElement.find('td span.locale');

            let spanColumnText = tdElements.map(function (index) {
                if (index <= 2) {
                    let td = $(this);
                    let span = td.find('span');

                    if (span.length) {
                        let th = trElement.closest('table').find('th').eq(index);

                        return {
                            value: span.text().trim(),
                            column: th.length ? '_' + th.attr('id').split('-')[0] : null
                        };
                    }
                    return null;
                }
            }).get();

            let translationsTexts = translationsElements.map(function () {
                return $(this).text().trim() + '-' + $(this).attr('id');
            }).get();

            translationsTexts.forEach(function (translationText) {
                let translation = translationText.split('-')[0];
                let locale = translationText.split('-')[3];
                params.push({name: locale, value: translation});
            });

            params.push({name: spanColumnText[0]['column'], value: spanColumnText[0]['value']});
            params.push({name: spanColumnText[1]['column'], value: spanColumnText[1]['value']});
            params.push({name: spanColumnText[2]['column'], value: spanColumnText[2]['value']});

            url = '{{ path('lexik_translation_update', { 'id': '-id-' }) }}';

            url = url.replace('-id-', lexikTranslationId);

            params.push({name: '_token', value: '{{ csrf_token('lexik-translation') }}'});

            sendRequest('PUT', url, params, false);
        }

        function deleteEntry(lexikTranslationId, locale)
        {
            if (confirm('{{ ('translations.element.delete.confirm')|trans|escape('js') }}')) {
                let url = '';
                let params = [];

                if (locale !== null) {
                    url = '{{ path('lexik_translation_delete_locale', { 'id': '-id-', 'locale': '-locale-' }) }}';
                    url = url.replace('-locale-', locale);
                } else {
                    url = '{{ path('lexik_translation_delete', { 'id': '-id-' }) }}';
                }
                url = url.replace('-id-', lexikTranslationId);

                params.push({name: '_token', value: '{{ csrf_token('lexik-translation') }}'});

                sendRequest('DELETE', url, params, true);
            }
        }

        function sendRequest(type, url, params, isReloadGrid)
        {
            $.ajax({
                type: type,
                url: url,
                data: params,
                dataType: 'json',
                async: true,
                success: function (data) {
                    if (isReloadGrid) {
                        reloadGrid('id', 'asc', false, true);
                    }
                },
                error: function (data) {
                    $.unblockUI();
                    showNoticeToast('Code: ' + data.status + '<br/>' + data.statusText, 'error');
                }
            });
        }

        $(document).ready( function() {
            $('.page-1').addClass('disabled');
            reloadGrid('id', 'asc', false, false);
        });

        function reloadGrid(orderedBy, sort, afterSortClicked, isAfterDelete, maxPageNumber)
        {
            $('#' + orderedBy + "-header").addClass("column-sorted");
            $('#' + orderedBy + "-header").attr("sort-type", sort);
            let table = '';
            let params = [];

            let lastRow = $('.table tbody');

            if (afterSortClicked) {
                params.push({ name: 'sidx', value: '_' + orderedBy });
                params.push({ name: 'sord', value: sort });
                params.push({ name: 'page', value: 1 });
                params.push({ name: 'rows', value: 20 });
            }

            $.ajax({
                type: 'GET',
                url: '{{ path('lexik_translation_list') }}',
                data: params,
                dataType: 'JSON',
                async: true,
                success: function(data) {
                    data.translations.forEach(item => {
                        table += constructHtmlTr(item);
                    });

                    if (!afterSortClicked && !isAfterDelete) {
                        $('.table').append(table);
                    } else {
                        lastRow.nextAll().remove();
                        lastRow.after(table);
                        if (afterSortClicked) {
                            reverseNextSortOrder(sort, orderedBy, maxPageNumber);
                            managePagesChanger(1, maxPageNumber);
                        }
                    }
                },
                error: function(data) {
                    $.unblockUI();
                    showNoticeToast('Code: ' + data.status + '<br/>' + data.statusText, 'error');
                }
            });
        }

        function sortColumn(column, sortOrder, maxPageNumber) {
            let sortedColumns = document.querySelectorAll('.table .column-sorted');
            sortedColumns.forEach(function(column) {
                column.classList.remove('column-sorted');
            });
            reloadGrid(column, sortOrder, true, false, maxPageNumber);
        }

        function filterColumn(column)
        {
            let sortedColumns = document.querySelectorAll('.table .column-filtered');

            sortedColumns.forEach(function(column) {
                column.classList.remove('column-filtered');
            });

            $('#' + column).addClass("column-filtered");

            let table = '';
            let lastRow = $('.table tbody');
            let params = [];
            let filterValue = $('#' + column).val();


            params.push({ name: '_search', value: true });
            params.push({ name: '_' + column, value: filterValue });
            params.push({ name: 'page', value: 1 });
            params.push({ name: 'rows', value: 20 });


            $.ajax({
                type: 'GET',
                url: '{{ path('lexik_translation_list') }}',
                data: params,
                dataType: 'JSON',
                async: true,
                success: function(data) {
                    $('.alert').remove();
                    lastRow.nextAll().remove();

                    if (data.total > 0) {
                        data.translations.forEach(item => {
                            table += constructHtmlTr(item);
                        });
                        lastRow.after(table);
                        $('.pagination').show();
                    } else {
                        $('.pagination').hide();
                        let noTranslationsHtml = displayNoTranslations();
                        $('.container').after(noTranslationsHtml);
                    }

                    let totalPages = data.total / 20;
                    let totalPagesRounded = Math.ceil(totalPages);
                    if (filterValue !== '') {
                        managePagesChanger(1, totalPagesRounded);
                    } else {
                        managePagesChanger(1, $('#id-header').attr('data-totalpages'));
                    }

                },
                error: function(data) {
                    $.unblockUI();
                    showNoticeToast('Code: ' + data.status + '<br/>' + data.statusText, 'error');
                }
            });
        }

        function reverseNextSortOrder(sort, orderedBy, maxPageNumber)
        {
            let nextSortOrder = '';

            if (sort == 'asc') {
                nextSortOrder = 'desc';
            } else {
                nextSortOrder = 'asc';
            }

            $('#' + orderedBy + '-header').attr('onclick', "sortColumn('" + orderedBy + "', '" + nextSortOrder + "', '" + maxPageNumber + "')");
        }

        function changePage(page, maxPageNumber) {

            let table = '';
            let lastRow = $('.table tbody');
            let params = [];

            params.push({ name: '_' + $('.table input.column-filtered').attr('id'), value: $('.table input.column-filtered').val() });
            params.push({ name: '_search', value: $('.table th.column-filtered').val() !== '' });
            params.push({ name: 'sidx', value: '_' + $('.table th.column-sorted').attr('id').replace('-header', '') });
            params.push({ name: 'sord', value: $('.table th.column-sorted').attr('sort-type') });
            params.push({ name: 'page', value: page });
            params.push({ name: 'rows', value: 20 });

            $.ajax({
                type: 'GET',
                url: '{{ path('lexik_translation_list') }}',
                data: params,
                dataType: 'JSON',
                async: true,
                success: function(data) {
                    data.translations.forEach(item => {
                        table += constructHtmlTr(item);
                    });
                    lastRow.nextAll().remove();
                    lastRow.after(table);
                    managePagesChanger(page, maxPageNumber);
                },
                error: function(data) {
                    $.unblockUI();
                    showNoticeToast('Code: ' + data.status + '<br/>' + data.statusText, 'error');
                }
            });
        }


        function managePagesChanger(page, maxPageNumber)
        {
            $('.prev').attr('onclick', "changePage(" + (page - 1) + "," + maxPageNumber + ")");
            $('.next').attr('onclick', "changePage(" + (page + 1) + "," + maxPageNumber + ")");

            if (page != 1) {
                $('.prev').removeClass('disabled');
            } else {
                $('.prev').addClass('disabled');
            }

            let startPage = Math.max(page - 5, 1);
            let endPage = Math.min(page + 5, maxPageNumber);

            let additionalHTML = '';
            for (let i = startPage; i <= endPage; i++) {
                if (i === page) {
                    additionalHTML += '<a class="page-' + i + '" href="#" class="disabled">' + i + '</a>';
                } else {
                    additionalHTML += '<a class="page-' + i + '" onclick="changePage(' + i + ',' + maxPageNumber+')">' + i + '</a>';
                }
            }

            $('.dynamicPages').html(additionalHTML);
            $('.page-' + page).addClass('disabled');
        }

        function constructHtmlTr(item) {
            let tr = `
        <tr class="content">
            <td>
                <span>${item._id}</span>
                <div on="editType">
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-link delete" style="display:none">
                        <i class="glyphicon glyphicon-remove text-danger"></i>
                    </button>
                </div>
            </td>
            <td>
                <span>${item._domain}</span>
                <div on="editType">
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-link delete" style="display:none">
                        <i class="glyphicon glyphicon-remove text-danger"></i>
                    </button>
                </div>
            </td>
            <td>
                <span>${item._key}</span>
                <div on="editType">
                </div>
                <div class="text-center">
                    <button id="btnKeyDelete-${item._id}" onclick="deleteEntry(${item._id}, null, 'key')" type="button" class="btn btn-link delete" style="display:none">
                        <i class="glyphicon glyphicon-remove text-danger"></i>
                    </button>
                </div>
            </td>
            ${Object.keys(item).filter(key => key !== '_id' && key !== '_domain' && key !== '_key').map(locale => `
            <td>
                <span id="content-${item._id}-${locale}" class="locale">${item[locale]}</span>
                <div>
                    <textarea id="inputContent-${item._id}-${locale}" name="column.index" class="form-control" style="display: none">${item[locale]}</textarea>
                </div>
                <div class="text-center">
                    <button id="btnDelete-${item._id}-${locale}" onclick="deleteEntry(${item._id}, '${locale}', 'translation')" type="button" class="btn btn-link delete" style="display: none">
                        <i class="glyphicon glyphicon-remove text-danger"></i>
                    </button>
                </div>
            </td>
            `).join('')}
            <td>
                <div class="actions">
                    <button id="editButton-${item._id}" onclick="enableMode('edit', ${item._id})" type="button" class="btn btn-primary btn-sm">
                        <span class="glyphicon glyphicon-pencil"></span>
                    </button>
                    <button id="deleteButton-${item._id}" onclick="enableMode('delete', ${item._id})" type="button" class="btn btn-danger btn-sm">
                        <span class="glyphicon glyphicon-trash"></span>
                    </button>
                    <button id="saveButton-${item._id}" onclick="enableMode('view', ${item._id})" type="button" class="btn btn-success btn-sm" style="display: none">
                        <span class="glyphicon glyphicon-saved"></span>
                    </button>
                    <button id="cancelButton-${item._id}" onclick="enableMode('view', ${item._id})" type="button" class="btn btn-warning btn-sm" style="display: none">
                        <span class="glyphicon glyphicon-ban-circle"></span>
                    </button>
                    <div></div>
                </div>
            </td>
        </tr>`;

            return tr;
        }

        function displayNoTranslations()
        {
            let div =
            `<div class="alert alert-info">
                No translations
            </div>`;

            return div;
        }

    </script>
{% endblock %}
